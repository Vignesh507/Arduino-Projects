#include <Adafruit_SSD1306.h>
#include <Keyboard.h>
#include <Wire.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

const int button_Up = 20;
const int button_Down = 18;
const int button_Select = 21;
const int button_Clear = 19;

int Up_arrow;
int ShutdownButton;
int Select;
int Clear;
int ShutdownButtonCounter = 0;
int IncrementCounter = 0;
int SelectionCounter = 0;
const int TextSize = 1;

int DisplayColumn = 10;
int DisplayFirstRow = 5;
int DisplaySecondRow = 20;
int DisplayThirdRow = 35;
int DisplayFourthRow = 50;

String Data[] = {"System 1", "System 2", "System 3", "System 4"};
String PasswordData[] = {"18833", "9952", "2023"};
//int Array_Size = sizeof(Data)/sizeof(Data[0]);

const unsigned char epd_bitmap_Icon [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x1f, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x1f, 0xe0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x1f, 0xe0, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x1f, 0xe0, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x1f, 0xe0, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x1f, 0xe0, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x1f, 0xe0, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x1f, 0xe0, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x1f, 0xe0, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xf0, 0x1f, 0xe0, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x1f, 0xe0, 0x7f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x1f, 0xe0, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x1f, 0xe0, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x00, 0x1f, 0xe0, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 0x00, 0x1f, 0xe0, 0x01, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x1f, 0xe0, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x1f, 0xe0, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x1f, 0xe0, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x1f, 0xe0, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x1f, 0xe0, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0xff, 0x80, 0x00, 0x1f, 0xe0, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0xff, 0x80, 0x00, 0x1f, 0xe0, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0xff, 0x80, 0x00, 0x1f, 0xe0, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0xff, 0x80, 0x00, 0x1f, 0xe0, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0xff, 0x80, 0x00, 0x1f, 0xe0, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0xff, 0x80, 0x00, 0x1f, 0xe0, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x7f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

class Password
{
  public:
    int PasswordSelection = 0;
    void PasswordCracker()
    {
     Keyboard.press(KEY_RETURN);
     Keyboard.releaseAll();
     delay(500);
     Keyboard.print("18833");
     delay(1000);
     Keyboard.press(KEY_RETURN);
     Keyboard.releaseAll();
     delay(100);
    }
};

void setup() 
{
  Serial.begin(115200);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); 

  pinMode(button_Up, INPUT_PULLUP);
  pinMode(button_Down, INPUT_PULLUP);
  pinMode(button_Select, INPUT_PULLUP);
  pinMode(button_Clear, INPUT_PULLUP);

  display.clearDisplay(); 
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(6, 15);
  display.println("USB Rubber");
  display.setCursor(30, 35);
  display.println("Ducky");
  display.display(); 
  delay(2000);
  display.clearDisplay();
}

void Shutdown()
{
  Keyboard.press(KEY_LEFT_GUI);
  Keyboard.press('r');
  delay(100);
  Keyboard.releaseAll();
  delay(500);
  Keyboard.print("shutdown /s /t 0");
  delay(100);
  Keyboard.press(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll();
  delay(500); 
}

void email()
{
  Keyboard.press(KEY_LEFT_GUI);
  Keyboard.press('r');
  delay(100);
  Keyboard.releaseAll();
  delay(500);
  Keyboard.print("");
  delay(100);
  Keyboard.press(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll();
  delay(500); 
}

void Malfunction()
{
  Keyboard.press(KEY_LEFT_GUI);
  Keyboard.press('r');
  delay(100);
  Keyboard.releaseAll();
  delay(100);
  Keyboard.print("notepad");
  delay(500);
  Keyboard.press(KEY_RETURN);
  Keyboard.releaseAll();
  delay(100);
}

void Control_Panel()
{
  Keyboard.press(KEY_LEFT_GUI);
  Keyboard.press('r');
  delay(100);
  Keyboard.releaseAll();
  delay(500);
  Keyboard.print("Control");
  delay(100);
  Keyboard.press(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll();
  delay(500);
}

void loop()
{
  Up_arrow = digitalRead(button_Up);
  ShutdownButton = digitalRead(button_Down);
  Select = digitalRead(button_Select);
  Clear = digitalRead(button_Clear);
  
  if(Up_arrow == 0)
  {
    IncrementCounter++;
    Serial.print("Menu Option : ");
    Serial.println(IncrementCounter);
    delay(250);
    if(IncrementCounter == 5)
    {
      IncrementCounter = 0;
    }
  }

  if(ShutdownButton == 0)
  {
   ShutdownButtonCounter++;
   Serial.print("Shutdown Option : ");
   Serial.println(ShutdownButtonCounter); 
   delay(250);
   while(ShutdownButtonCounter == 1)
   {
    display.clearDisplay();
    display.setTextColor(WHITE);
    display.setTextSize(1);
    display.setCursor(15, 30);
    display.drawBitmap(0, 0, epd_bitmap_Icon, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
    display.display();
    Shutdown();
   } 
  }

  switch(IncrementCounter)
  {
    case 1:
    display.clearDisplay(); 
    display.setTextSize(TextSize);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(DisplayColumn, DisplayFirstRow);
    display.println("> Control Panel");
    display.setCursor(DisplayColumn, DisplaySecondRow);
    display.println("  Network");
    display.setCursor(DisplayColumn, DisplayThirdRow);
    display.println("  Password");
    display.setCursor(DisplayColumn, DisplayFourthRow);
    display.println("  Malfunction");
    display.display(); 
    display.clearDisplay();

    if(Select == 0)
    {
      SelectionCounter++; 
      Serial.print("Select Button : ");
      Serial.println(SelectionCounter); 
      delay(250);  
    }
    if(SelectionCounter == 2)
    {
      SelectionCounter = 0;
    }

    while(SelectionCounter == 1)
    {
     display.clearDisplay();  
     display.setTextColor(WHITE);
     display.setTextSize(1);
     display.setCursor(0, 19);
     display.print("---------------------");
     display.setCursor(10, 29);
     display.print("Process Completed");
     display.setCursor(0, 39);
     display.print("---------------------");
     display.display();
     Serial.println("Control Panel Selected");
     Control_Panel();
    
     while(SelectionCounter == 1)
     {
      Clear = digitalRead(button_Clear);
      if(Clear == 0)
      {
       SelectionCounter = 0;
      }
     }
    }
    break;

    case 2:
    display.clearDisplay(); 
    display.setTextSize(TextSize);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(DisplayColumn, DisplayFirstRow);
    display.println("  Control Panel");
    display.setCursor(DisplayColumn, DisplaySecondRow);
    display.println("> Network");
    display.setCursor(DisplayColumn, DisplayThirdRow);
    display.println("  Password");
    display.setCursor(DisplayColumn, DisplayFourthRow);
    display.println("  Malfunction");
    display.display(); 

    if(Select == 0)
    {
      SelectionCounter++; 
      Serial.print("Select Button : ");
      Serial.println(SelectionCounter); 
      delay(250);  
    }
    if(SelectionCounter == 2)
    {
      SelectionCounter = 0;
    }

    while(SelectionCounter == 1)
    {
     display.clearDisplay();
     display.setTextColor(WHITE);
     display.setTextSize(2);
     display.setCursor(0, 0);
     display.print("Done");
     display.display();
     Serial.println("Network Selected");
     //PasswordCracker();
    
     while(SelectionCounter == 1)
     {
      Clear = digitalRead(button_Clear);
      if(Clear == 0)
      {
       SelectionCounter = 0;
      }
     }
    }
    break;

    case 3:
    display.clearDisplay(); 
    display.setTextSize(TextSize);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(DisplayColumn, DisplayFirstRow);
    display.println("  Control Panel");
    display.setCursor(DisplayColumn, DisplaySecondRow);
    display.println("  Network");
    display.setCursor(DisplayColumn, DisplayThirdRow);
    display.println("> Password");
    display.setCursor(DisplayColumn, DisplayFourthRow);
    display.println("  Malfunction");
    display.display(); 

    if(Select == 0)
    {
      SelectionCounter++; 
      Serial.print("Select Button : ");
      Serial.println(SelectionCounter); 
      delay(250);  
    }
    if(SelectionCounter == 2)
    {
      SelectionCounter = 0;
    }

    while(SelectionCounter == 1)
    {
     display.clearDisplay();
     display.setTextColor(WHITE);
     display.setTextSize(1);
     display.setCursor(10, 20);
     display.print("Processing......");
     display.display();
     Serial.println("Password Selected");
     
     while(SelectionCounter == 1)
     {
      Clear = digitalRead(button_Clear);
      if(Clear == 0)
      {
       SelectionCounter = 0;
      }
     }
    break;

    case 4:
    display.clearDisplay(); 
    display.setTextSize(TextSize);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(DisplayColumn, DisplayFirstRow);
    display.println("  Control Panel");
    display.setCursor(DisplayColumn, DisplaySecondRow);
    display.println("  Network");
    display.setCursor(DisplayColumn, DisplayThirdRow);
    display.println("  Password");
    display.setCursor(DisplayColumn, DisplayFourthRow);
    display.println("> Malfunction");
    display.display(); 

    if(Select == 0)
    {
      SelectionCounter++; 
      Serial.print("Select Button : ");
      Serial.println(SelectionCounter); 
      delay(250);  
    }
    if(SelectionCounter == 2)
    {
      SelectionCounter = 0;
    }

    while(SelectionCounter == 1)
    {
     display.clearDisplay();
     display.setTextColor(WHITE);
     display.setTextSize(1);
     display.setCursor(10, 20);
     display.print("Processing......");
     display.display();
     Serial.println("Malfunction Selected");
     
     while(SelectionCounter == 1)
     {
      //Malfunction();
      Clear = digitalRead(button_Clear);
      if(Clear == 0)
      {
       SelectionCounter = 0;
      }
     }
    }
    break;
  }
 }
}
